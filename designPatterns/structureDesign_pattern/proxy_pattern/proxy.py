
"""
The proxy design pattern includes a new object, which is called “Proxy” in place of an existing object which is called the “Real Subject”.
The proxy object created of the real subject must be on the same interface in such a way that the client should not get
 any idea that proxy is used in place of the real object.
Requests generated by the client to the proxy are passed through the real subject.
"""
"""
    @date   : 11/11/2019
    @Author: DeepakMishra
    @guide by: Gunjan sharma
"""

# @class Image
class Image:
    #  @ constructor
    def __init__(self, filename):
        self._filename = filename

    # @load image from disk
    def load_image_from_disk(self):
        print("loading " + self._filename)

    # @display image
    def display_image(self):
        print("display " + self._filename)


# @proxy class
class Proxy:
    def __init__(self, subject):
        self._subject = subject
        self._proxystate = None


# @inherit the proxy
class ProxyImage(Proxy):
    # changes the implementation
    def display_image(self):
        if self._proxystate is None:
            # @call the baseclass function
            self._subject.load_image_from_disk()
            self._proxystate = 1
        print("display " + self._subject._filename)


# @creating object
proxy_image1 = ProxyImage(Image("HiRes_10Mb_Photo1"))
proxy_image2 = ProxyImage(Image("HiRes_10Mb_Photo2"))

# @calling the function
proxy_image1.display_image()  # loading necessary
proxy_image1.display_image()  # loading unnecessary
proxy_image2.display_image()  # loading necessary
proxy_image2.display_image()  # loading unnecessary
proxy_image1.display_image()  # loading unnecessary
